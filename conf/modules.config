/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CENTRIFUGE_CENTRIFUGE {
        ext.args = "--min-hitlen 50"
        publishDir = [
            path: { "${params.outdir}/01_long_read_qc/centrifuge/centrifuge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CENTRIFUGE_KREPORT {
        publishDir = [
            path: { "${params.outdir}/01_long_read_qc/centrifuge/kreport" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: RECENTRIFUGE_C {
        publishDir = [
            path: { "${params.outdir}/01_long_read_qc/centrifuge/recentrifuge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: RECENTRIFUGE_KR {
        publishDir = [
            path: { "${params.outdir}/01_short_read_qc/kraken2/recentrifuge" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: NANOPLOT {
        publishDir = [
            path: { "${params.outdir}/01_long_read_qc/nanoplot/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KMER_FREQ {
        publishDir = [
            path: { "${params.outdir}/01_long_read_qc/genome_size_est/kmerfreq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GCE {
        publishDir = [
            path: { "${params.outdir}/01_long_read_qc/genome_size_est/gce" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: EXTRACT_SR {
        publishDir = [
            path: { "${params.outdir}/output/genome_size_est" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: EXTRACT_LR {
        publishDir = [
            path: { "${params.outdir}/output/genome_size_est" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FORMAT {
        publishDir = [
            path: { "${params.outdir}/output/genome_size_est" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TOTAL_BASES_LR {
        publishDir = [
            path: { "${params.outdir}/output/longread_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TOTAL_BASES_SR {
        publishDir = [
            path: { "${params.outdir}/output/shortread_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COVERAGE_LR {
        publishDir = [
            path: { "${params.outdir}/output/longread_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COVERAGE_SR {
        publishDir = [
            path: { "${params.outdir}/output/shortread_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BIOAWK {
        ext.args = "-c fastx \'length(\$seq) > 1000{ print \">\"\$name; print \$seq }\'"
        publishDir = [
            path: { "${params.outdir}/01_long_read_qc/lengthfilter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }    

    withName: SEQKIT_GREP {
        publishDir = [
            path: { "${params.outdir}/01_long_read_qc/centrifuge/filtered" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }    

    withName: FLYE {
        publishDir = [
            path: { "${params.outdir}/02_assembly/long_read/flye" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CANU {
        ext.args = 'useGrid=true -gridOptions="--wait --partition=general --qos=general" canuIteration=1'
        publishDir = [
            path: { "${params.outdir}/02_assembly/long_read/canu" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: REDUNDANS_A {
        publishDir = [
            path: { "${params.outdir}/02_assembly/short_read/redundans" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/quast/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BUSCO {
        ext.args = '-m genome'
        publishDir = [
            path: { "${params.outdir}/assembly_qc/busco/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MERQURY {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/merqury/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MERYL_COUNT {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/merqury/meryl_db" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PYCOQC {
        ext.args = '-a flye_assembly'
        publishDir = [
            path: { "${params.outdir}/assembly_qc/pycoqc/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MINIMAP2_INDEX {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/minimap2/index/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MINIMAP2_ALIGN {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/minimap2/align/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/assembly_qc/samtools/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MASURCA {
        publishDir = [
            path: { "${params.outdir}/02_assembly/hybrid/masurca" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        maxRetries = 5
    }

    withName: MASURCA_SR {
        publishDir = [
            path: { "${params.outdir}/02_assembly/short_read/masurca" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        maxRetries = 5
    }

    withName: MASURCA_SR_ADV {
        publishDir = [
            path: { "${params.outdir}/02_assembly/short_read/masurca" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        maxRetries = 5
    }

    withName: MEDAKA {
        publishDir = [
            path: { "${params.outdir}/03_polish/long_read/medaka" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        maxRetries = 5
    }

    withName: GUNZIP {
        publishDir = [
            path: { "${params.outdir}/other/gunzip/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GZIP {
        publishDir = [
            path: { "${params.outdir}/other/gzip/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC_2 {
        publishDir = [
            path: { "${params.outdir}/01_short_read_qc/fastqc/2_adapter_trim" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC_3 {
        publishDir = [
            path: { "${params.outdir}/01_short_read_qc/fastqc/3_decontam" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        publishDir = [
            path: { "${params.outdir}/01_short_read_qc/fastqc/1_raw_reads" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTP {
        publishDir = [
            path: { "${params.outdir}/01_short_read_qc/fastp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GENOMESCOPE2 {
        publishDir = [
            path: { "${params.outdir}/01_short_read_qc/genomescope2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: JELLYFISH_HIST {
        publishDir = [
            path: { "${params.outdir}/01_short_read_qc/jellyfish" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: JELLYFISH_KMER {
        publishDir = [
            path: { "${params.outdir}/01_short_read_qc/jellyfish" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: KRAKEN2_KRAKEN2 {
        publishDir = [
            path: { "${params.outdir}/01_short_read_qc/kraken2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: POLCA {
        publishDir = [
            path: { "${params.outdir}/03_polish/hybrid/polca" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: HISTOGRAM {
        publishDir = [
            path: { "${params.outdir}/04_purge/histogram/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PURGE {
        publishDir = [
            path: { "${params.outdir}/04_purge/long_read/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: REDUNDANS_P {
        publishDir = [
            path: { "${params.outdir}/04_purge/short_read/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ALIGN {
        publishDir = [
            path: { "${params.outdir}/04_purge/align/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: RAGTAG {
        publishDir = [
            path: { "${params.outdir}/05_scaffold/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
